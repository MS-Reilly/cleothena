{"version":3,"file":"stories-Modal-stories.154010f127370d5088d8.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://cleothena/./src/components/Modal/Modal.jsx","webpack://cleothena/./src/components/Modal/Modal.scss","webpack://cleothena/./src/stories/Modal.stories.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\n/**\n * A reusable modal component.\n *\n * @component\n * @example\n * const handleClose = () => console.log('Modal closed');\n * return (\n *   <Modal isOpen onClose={handleClose} title=\"Example Modal\">\n *     <p>This is a modal content.</p>\n *   </Modal>\n * );\n */\nconst Modal = ({ isOpen, onClose, title, children, size }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className={`modal modal--${size}`} onClick={(e) => e.stopPropagation()}>\n        <div className=\"modal__header\">\n          <h2 className=\"modal__title\">{title}</h2>\n          <button className=\"modal__close\" onClick={onClose}>&times;</button>\n        </div>\n        <div className=\"modal__content\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  /** Determines if the modal is open. */\n  isOpen: PropTypes.bool.isRequired,\n  /** Function to close the modal. */\n  onClose: PropTypes.func.isRequired,\n  /** Title displayed at the top of the modal. */\n  title: PropTypes.string,\n  /** Content inside the modal. */\n  children: PropTypes.node.isRequired,\n  /** Sets the size of the modal. */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n};\n\nModal.defaultProps = {\n  title: '',\n  size: 'md',\n};\n\nexport default Modal;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Modal.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Modal.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Modal.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React from \"react\";\nimport Modal from \"../components/Modal/Modal\";\n\nexport default {\n  title: \"Components/Modal\",\n  component: Modal,\n  argTypes: {\n    isOpen: { control: \"boolean\" },\n    title: { control: \"text\" },\n    size: {\n      control: { type: \"select\" },\n      options: [\"sm\", \"md\", \"lg\"],\n    },\n    onClose: { action: \"closed\" },\n  },\n};\n\nconst Template = (args) => <Modal {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  isOpen: true,\n  title: \"Default Modal\",\n  size: \"md\",\n  children: <p>This is a modal content.</p>,\n};\n\nexport const Small = Template.bind({});\nSmall.args = {\n  isOpen: true,\n  title: \"Small Modal\",\n  size: \"sm\",\n  children: <p>This is a small modal.</p>,\n};\n\nexport const Large = Template.bind({});\nLarge.args = {\n  isOpen: true,\n  title: \"Large Modal\",\n  size: \"lg\",\n  children: <p>This is a large modal.</p>,\n};"],"names":[],"sourceRoot":""}